/*
 * This file is part of Blackvoxel.
 *
 * Copyright 2010-2014 Laurent Thiebaut & Olivia Merle
 *
 * Blackvoxel is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Blackvoxel is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * ZWorldGenesis.cpp
 *
 *  Created on: 10 sept. 2011
 *      Author: laurent
 */

#include <stdio.h>

#include "ZWorldGenesis.h"
#include "math.h"
#include "stdlib.h"

#ifndef Z_ZGENERICCANVA_H
#  include "z/ZGenericCanva.h"
#endif

#ifndef Z_ZVOXELGFX_TREE_STRAIGHT_H
#  include "ZVoxelGfx_Tree_Straight.h"
#endif

#ifndef Z_ZVOXELGFX_TREE_GIANT_H
#  include "ZVoxelGfx_Tree_Giant.h"
#endif

#ifndef Z_ZVOXELEXTENSION_STORAGE_H
#  include "ZVoxelExtension_Storage.h"
#endif

#ifndef A_COMPILESETTINGS_H
#  include "ACompileSettings.h"
#endif

#ifndef Z_ZINCLUSIONPROBABILIZER_H
#  include "ZInclusionProbabilizer.h"
#endif

#ifndef Z_ZGAME_H
#  include "ZGame.h"
#endif

#ifndef Z_ZSTREAMS_FILE_H
#  include "z/ZStream_File.h"
#endif


extern ZGame * Ge;

const char * ZWorldGenesis::ZoneMap_New[]=
{
//                                                                                                    11111111111111111111111111111
//          11111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222
// 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 1
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 2
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 3
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 4
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 5
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 6
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 7
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 8
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 9
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 10
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 11
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 12
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 13
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 14
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 15
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 16
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 17
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 18
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 19
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 20
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 21
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 22
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 23
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 24
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 25
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 26
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 27
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 28
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 29
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 30
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 31
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 32
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 33
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 34
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 35
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 36
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 37
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 38
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 39
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 40
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 41
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 42
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 43
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 44
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 45
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 46
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 47
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 48
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 49
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 50
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 51
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 52
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 53
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 54
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666633333333333333333333666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 55
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632222222222222222223666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 56
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632000000000000000023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 57
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 58
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 59
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8888888888EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 60
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8555555558EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 61
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8577777758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 62
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857AAAA758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 63
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857A00A758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 64
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857A00A758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 65
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857AAAA758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 66
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8577777758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 67
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8555555558EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 68
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8888888888EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 69
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 70
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 71
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632000000000000000023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 72
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632222222222222222223666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 73
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666633333333333333333333666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 74
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 75
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 76
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 77
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 78
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 79
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 80
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 81
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 82
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 83
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 84
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 85
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 86
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 87
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 88
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 89
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 90
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 91
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 92
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 93
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 94
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 95
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 96
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 97
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 98
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 99
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 100
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 101
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 102
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 103
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 104
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 105
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 106
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 107
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 108
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 109
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 110
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 111
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 112
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 113
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 114
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 115
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 116
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 117
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 118
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 119
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 120
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 121
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 122
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 123
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 124
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 125
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 126
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 127
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"  // 128
};

/*
const char * ZWorldGenesis::ZoneMap_New[]=
{
// 0000000001111111111222222222233333333334444444444555555555566666
// 1234567890123456789012345678901234567890123456789012345678901234
  "0000000000000000000000000000000000000000000000000000000000000000", // 1
  "0000000000000000000000000000000000000000000000000000000000000000", // 2
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 3
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 4
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 5
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 6
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 7
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 8
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 9
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 10
  "00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00", // 11
  "00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00", // 12
  "00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00", // 13
  "00DDDDBBBBAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAABBBBDDDD00", // 14
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 15
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 16
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 17
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 18
  "00DDDDBBBBAAAB9999CCCCCCCCCCCCCCCCCCCCCCCCCCCC9999BAAABBBBDDDD00", // 19
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 20
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 21
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 22
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 23
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 24
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 25
  "00DDDDBBBBAAAB9999C66666633333333333333666666C9999BAAABBBBDDDD00", // 26
  "00DDDDBBBBAAAB9999C66666632222222222223666666C9999BAAABBBBDDDD00", // 27
  "00DDDDBBBBAAAB9999C66666632888888888823666666C9999BAAABBBBDDDD00", // 28
  "00DDDDBBBBAAAB9999C66666632855555555823666666C9999BAAABBBBDDDD00", // 29
  "00DDDDBBBBAAAB9999C66666632857777775823666666C9999BAAABBBBDDDD00", // 30
  "00DDDDBBBBAAAB9999C66666632857AAAA75823666666C9999BAAABBBBDDDD00", // 31
  "00DDDDBBBBAAAB9999C66666632857AEEA75823666666C9999BAAABBBBDDDD00", // 32
  "00DDDDBBBBAAAB9999C66666632857A0EA75823666666C9999BAAABBBBDDDD00", // 33
  "00DDDDBBBBAAAB9999C66666632857AAAA75823666666C9999BAAABBBBDDDD00", // 34
  "00DDDDBBBBAAAB9999C66666632857777775823666666C9999BAAABBBBDDDD00", // 35
  "00DDDDBBBBAAAB9999C66666632855555555823666666C9999BAAABBBBDDDD00", // 36
  "00DDDDBBBBAAAB9999C66666632888888888823666666C9999BAAABBBBDDDD00", // 37
  "00DDDDBBBBAAAB9999C66666632222222222223666666C9999BAAABBBBDDDD00", // 38
  "00DDDDBBBBAAAB9999C66666633333333333333666666C9999BAAABBBBDDDD00", // 39
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 40
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 41
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 42
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 43
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 44
  "00DDDDBBBBAAAB9999C66666666666666666666666666C9999BAAABBBBDDDD00", // 45
  "00DDDDBBBBAAAB9999CCCCCCCCCCCCCCCCCCCCCCCCCCCC9999BAAABBBBDDDD00", // 46
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 47
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 48
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 49
  "00DDDDBBBBAAAB999999999999999999999999999999999999BAAABBBBDDDD00", // 50
  "00DDDDBBBBAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAABBBBDDDD00", // 51
  "00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00", // 52
  "00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00", // 53
  "00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00", // 54
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 55
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 56
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 57
  "00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00", // 58
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 59
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 60
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 61
  "00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00", // 62
  "0000000000000000000000000000000000000000000000000000000000000000", // 63
  "0000000000000000000000000000000000000000000000000000000000000000"  // 64
};
*/

const char * ZWorldGenesis::RingNum[]=
{
//                                                                                                    11111111111111111111111111111
//          11111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222
// 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 1
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 2
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 3
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 4
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 5
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 6
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 7
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 8
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 9
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 10
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 11
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 12
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 13
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 14
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 15
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 16
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 17
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 18
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 19
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 20
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 21
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 22
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 23
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 24
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 25
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 26
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 27
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 28
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 29
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 30
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 31
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 32
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 33
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 34
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 35
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 36
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 37
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 38
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 39
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 40
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 41
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 42
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 43
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 44
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 45
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 46
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 47
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 48
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 49
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 50
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 51
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 52
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 53
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 54
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999988888888888888888888999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 55
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987777777777777777778999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 56
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987666666666666666678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 57
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 58
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 59
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655444444444455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 60
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655433333333455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 61
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432222223455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 62
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432111123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 63
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432100123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 64
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432100123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 65
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432111123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 66
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432222223455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 67
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655433333333455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 68
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655444444444455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 69
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 70
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 71
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987666666666666666678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 72
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987777777777777777778999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 73
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999988888888888888888888999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 74
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 75
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 76
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 77
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 78
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 79
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 80
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 81
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 82
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 83
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 84
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 85
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 86
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 87
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 88
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 89
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 90
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 91
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 92
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 93
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 94
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 95
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 96
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 97
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 98
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 99
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 100
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 101
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 102
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 103
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 104
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 105
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 106
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 107
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 108
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 109
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 110
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 111
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 112
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 113
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 114
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 115
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 116
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 117
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 118
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 119
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 120
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 121
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 122
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 123
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 124
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 125
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 126
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 127
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"  // 128
};

/*
const char * ZWorldGenesis::RingNum[]=
{
// 0000000001111111111222222222233333333334444444444555555555566666
// 1234567890123456789012345678901234567890123456789012345678901234
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 1
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 2
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 3
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 4
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 5
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 6
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 7
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 8
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 9
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 10
  "CCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCC", // 11
  "CCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCC", // 12
  "CCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCC", // 13
  "CCCCCCCCCCBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBCCCCCCCCCC", // 14
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 15
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 16
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 17
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 18
  "CCCCCCCCCCBBBA999988888888888888888888888888889999ABBBCCCCCCCCCC", // 19
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 20
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 21
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 22
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 23
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 24
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 25
  "CCCCCCCCCCBBBA999987777776666666666666677777789999ABBBCCCCCCCCCC", // 26
  "CCCCCCCCCCBBBA999987777776555555555555677777789999ABBBCCCCCCCCCC", // 27
  "CCCCCCCCCCBBBA999987777776544444444445677777789999ABBBCCCCCCCCCC", // 28
  "CCCCCCCCCCBBBA999987777776543333333345677777789999ABBBCCCCCCCCCC", // 29
  "CCCCCCCCCCBBBA999987777776543222222345677777789999ABBBCCCCCCCCCC", // 30
  "CCCCCCCCCCBBBA999987777776543211112345677777789999ABBBCCCCCCCCCC", // 31
  "CCCCCCCCCCBBBA999987777776543210012345677777789999ABBBCCCCCCCCCC", // 32
  "CCCCCCCCCCBBBA999987777776543210012345677777789999ABBBCCCCCCCCCC", // 33
  "CCCCCCCCCCBBBA999987777776543211112345677777789999ABBBCCCCCCCCCC", // 34
  "CCCCCCCCCCBBBA999987777776543222222345677777789999ABBBCCCCCCCCCC", // 35
  "CCCCCCCCCCBBBA999987777776543333333345677777789999ABBBCCCCCCCCCC", // 36
  "CCCCCCCCCCBBBA999987777776544444444445677777789999ABBBCCCCCCCCCC", // 37
  "CCCCCCCCCCBBBA999987777776555555555555677777789999ABBBCCCCCCCCCC", // 38
  "CCCCCCCCCCBBBA999987777776666666666666677777789999ABBBCCCCCCCCCC", // 39
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 40
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 41
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 42
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 43
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 44
  "CCCCCCCCCCBBBA999987777777777777777777777777789999ABBBCCCCCCCCCC", // 45
  "CCCCCCCCCCBBBA999988888888888888888888888888889999ABBBCCCCCCCCCC", // 46
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 47
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 48
  "CCCCCCCCCCBBBA999999999999999999999999999999999999ABBBCCCCCCCCCC", // 49
  "CCCCCCCCCCBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBCCCCCCCCCC", // 50
  "CCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCC", // 51
  "CCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCC", // 52
  "CCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCC", // 53
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 54
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 55
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 56
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 57
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 58
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 59
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 60
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 61
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 62
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", // 63
  "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"  // 64
};
*/
const Long ZWorldGenesis::ZoneYOffset[] =
{
   0,-20,0,0,0, 0, 0, -64,-80,-80,-80,-100,-81,-75,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
// 0,-20,0,0,0,-64,-80,-80,-80,-100,-81,-75,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

};

const char * ZWorldGenesis::HeightMap_New[] =
{
//                                                                                                    11111111111111111111111111111
//          11111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222
// 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 1
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 2
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 3
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 4
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 5
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 6
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 7
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 8
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 9
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 10
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 11
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 12
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 13
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 14
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 15
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 16
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 17
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 18
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 19
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 20
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 21
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 22
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 23
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 24
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 25
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 26
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 27
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 28
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 29
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 30
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 31
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 32
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 33
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 34
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 35
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 36
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 37
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 38
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 39
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 40
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 41
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 42
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 43
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 44
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 45
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 46
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 47
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 48
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 49
  "00000000000000000000000000000000000000000000000005050505050505050505050505050505000000000000000000000000000000000000000000000000", // 50
  "00000000000000000000000000000000000000000000000000262626262626262626262626262620000000000000000000000000000000000000000000000000", // 51
  "00000000000000000000000000000000000000000000000005299999999999999999999999999925000000000000000000000000000000000000000000000000", // 52
  "00000000000000000000000000000000000000000000000000294444444444444444444444444920000000000000000000000000000000000000000000000000", // 53
  "00000000000000000000000000000000000000000000000005294111111111111111111111114925000000000000000000000000000000000000000000000000", // 54
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 55
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 56
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 57
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 58
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 59
  "00000000000000000000000000000000000000000000000005294100000222222222200000014925000000000000000000000000000000000000000000000000", // 60
  "00000000000000000000000000000000000000000000000000294100000288888888200000014920000000000000000000000000000000000000000000000000", // 61
  "00000000000000000000000000000000000000000000000005294100000285555558200000014925000000000000000000000000000000000000000000000000", // 62
  "00000000000000000000000000000000000000000000000000294100000285777758200000014920000000000000000000000000000000000000000000000000", // 63
  "00000000000000000000000000000000000000000000000005294100000285700758200000014925000000000000000000000000000000000000000000000000", // 64
  "00000000000000000000000000000000000000000000000000294100000285700758200000014920000000000000000000000000000000000000000000000000", // 65
  "00000000000000000000000000000000000000000000000005294100000285777758200000014925000000000000000000000000000000000000000000000000", // 66
  "00000000000000000000000000000000000000000000000000294100000285555558200000014920000000000000000000000000000000000000000000000000", // 67
  "00000000000000000000000000000000000000000000000005294100000288888888200000014925000000000000000000000000000000000000000000000000", // 68
  "00000000000000000000000000000000000000000000000000294100000222222222200000014920000000000000000000000000000000000000000000000000", // 69
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 70
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 71
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 72
  "00000000000000000000000000000000000000000000000000294100000000000000000000014925000000000000000000000000000000000000000000000000", // 73
  "00000000000000000000000000000000000000000000000005294100000000000000000000014920000000000000000000000000000000000000000000000000", // 74
  "00000000000000000000000000000000000000000000000000294100000000000000000000014925000000000000000000000000000000000000000000000000", // 75
  "00000000000000000000000000000000000000000000000005294111111111111111111111114925000000000000000000000000000000000000000000000000", // 76
  "00000000000000000000000000000000000000000000000000294444444444444444444444444920000000000000000000000000000000000000000000000000", // 77
  "00000000000000000000000000000000000000000000000005299999999999999999999999999925000000000000000000000000000000000000000000000000", // 78
  "00000000000000000000000000000000000000000000000000222222222222222222222222222220000000000000000000000000000000000000000000000000", // 79
  "00000000000000000000000000000000000000000000000005050505000050505050500005050505000000000000000000000000000000000000000000000000", // 80
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 81
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 82
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 83
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 84
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 85
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 86
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 87
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 88
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 89
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 90
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 91
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 92
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 93
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 94
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 95
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 96
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 97
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 98
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 99
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 100
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 101
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 102
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 103
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 104
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 105
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 106
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 107
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 108
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 109
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 110
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 111
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 112
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 113
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 114
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 115
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 116
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 117
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 118
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 119
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 120
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 121
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 122
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 123
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 124
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 125
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 126
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 127
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  // 128
};

/*
const char * ZWorldGenesis::HeightMap_New[] =
{
  "00000000000000000000000000000000",
  "00000000000000000000000000000000",
  "00000000000000000000000000000000",
  "00000000000000000000000000000000",
  "00005050505050505050505050505000",
  "00000262626262626262626262620000",
  "00005299999999999999999999925000",
  "00000294444444444444444444920000",
  "00005294111111111111111114925000",
  "00000294100000000000000014920000",
  "00000294100000000000000014920000",
  "00005294100222222222200014925000",
  "00000294100288888888200014920000",
  "00005294100285555558200014925000",
  "00000294100285777758200014920000",
  "00005294100285700758200014925000",
  "00000294100285700758200014920000",
  "00005294100285777758200014925000",
  "00000294100285555558200014920000",
  "00005294100288888888200014925000",
  "00000294100222222222200014920000",
  "00005294100000000000000014925000",
  "00005294100000000000000014925000",
  "00000294100000000000000014920000",
  "00005294111111111111111114925000",
  "00000294444444444444444444920000",
  "00005299999999999999999999925000",
  "00000222222222222222222222220000",
  "00005050505050505050505050505000",
  "00000000000000000000000000000000",
  "00000000000000000000000000000000",
  "00000000000000000000000000000000"
};
*/





double ZWorldGenesis::GetHeightMap(Long Absolute_x, Long Absolute_z)
{
  Long MapX, MapZ;
  ULong RemainX, RemainZ;
  double res, P1,P2,P3,P4, Inter_1, Inter_2, Coef1, Coef2;

  //Absolute_x -= 128;
  //Absolute_z -= 128;
  MapX = ((Absolute_x) >> 8) + 64;
  MapZ = ((Absolute_z) >> 8) + 64;
  RemainX = (Absolute_x) & 255;
  RemainZ = (Absolute_z) & 255;
  Coef1   = ((double)RemainX) / 255.0;
  Coef2   = ((double)RemainZ) / 255.0;

  P1 = (double)ConvCN[(ZMemSize)HeightMap_New[MapX  ][MapZ  ]];
  P2 = (double)ConvCN[(ZMemSize)HeightMap_New[MapX+1][MapZ  ]];
  P3 = (double)ConvCN[(ZMemSize)HeightMap_New[MapX  ][MapZ+1]];
  P4 = (double)ConvCN[(ZMemSize)HeightMap_New[MapX+1][MapZ+1]];

  Inter_1 = P1 * (1.0 - Coef1) + P2 * Coef1;
  Inter_2 = P3 * (1.0 - Coef1) + P4 * Coef1;
  res     = Inter_1 * (1.0 - Coef2) + Inter_2 * Coef2;

  return(res);
}

void ZWorldGenesis::GenerateZone_WaterMountain(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;
  double P1, P2,P3,P4;
  ZVector3L SectorStart;
  UByte Stencil, Stencil2, CStencil;

  SectorStart.x = (VoxelSector->Pos_x << ZVOXELBLOCSHIFT_X) & 255;
  SectorStart.z = (VoxelSector->Pos_z << ZVOXELBLOCSHIFT_Z) & 255;
  SectorStart.y = (VoxelSector->Pos_y << ZVOXELBLOCSHIFT_Y);

  VoxelSector->Flag_IsActiveVoxels = true;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);

      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 60 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 60 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 60 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 60 ;

      height = Interpolation_2d(P1,P2,P3,P4,Coef1,Coef2) - 15 ;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      Stencil  = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );
      Stencil2 = Canva_2.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );
      CStencil = (Stencil>0) || (Stencil2<1);

      for (y=0, Voxel_y = (Sector_y << ZVOXELBLOCSHIFT_Y) - HeightOffset ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {

        Deep = Voxel_y - height + (( CStencil ) ? 15 : 0);
        VoxelType = 0;

        if (Deep >=0 )
        {
          VoxelType = 0;
        }
        else
        {
          if (CStencil>0)VoxelType = 10;
          else VoxelType = 3;
        }

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}

void ZWorldGenesis::GenerateZone_WaterLands(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep, Deep2;
  UShort VoxelType;
  Long height;
  double P1, P2,P3,P4;
  // ZGenericByteCanva Canva;
  ZVector3L SectorStart;
  UByte Stencil;
  //ZLineCoords LineCoords;

  SectorStart.x = (VoxelSector->Pos_x << ZVOXELBLOCSHIFT_X) & 255;
  SectorStart.z = (VoxelSector->Pos_z << ZVOXELBLOCSHIFT_Z) & 255;
  SectorStart.y = (VoxelSector->Pos_y << ZVOXELBLOCSHIFT_Y);

  VoxelSector->Flag_IsActiveVoxels = true;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);

      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 30 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 30 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 30 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 30 ;

      height = Interpolation_2d(P1,P2,P3,P4,Coef1,Coef2) - 15 + HeightOffset;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      Stencil = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        Deep2 = Voxel_y - HeightOffset;

        VoxelType = 0;

        if (Deep >=0)
        {
          if (Deep2 > 0) VoxelType = 0;
          else VoxelType = 0;
        }
        else          VoxelType = 10;

        if (Stencil==0)
        {
          if (Deep2 < -10 && Deep2 >=-20 )  VoxelType = 85;//86;
          else if (Deep2 < -20 ) VoxelType = 10;
          else                   VoxelType = 0;
        }

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}
/*
void ZWorldGenesis::GenerateZone_WaterLands(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;
  double P1, P2,P3,P4;
  // ZGenericByteCanva Canva;
  ZVector3L SectorStart;
  UByte Stencil;
  //ZLineCoords LineCoords;

  SectorStart.x = (VoxelSector->Pos_x << ZVOXELBLOCSHIFT_X) & 255;
  SectorStart.z = (VoxelSector->Pos_z << ZVOXELBLOCSHIFT_Z) & 255;
  SectorStart.y = (VoxelSector->Pos_y << ZVOXELBLOCSHIFT_Y);

  VoxelSector->Flag_IsActiveVoxels = true;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);

      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 30 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 30 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 30 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 30 ;

      height = Interpolation_2d(P1,P2,P3,P4,Coef1,Coef2) - 15 + HeightOffset;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      Stencil = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0)
        {
          if (Voxel_y > 0) VoxelType = 0;
          else VoxelType = 0;
        }
        else          VoxelType = 3;

        if (Stencil==0)
        {
          if (Voxel_y < -10 && Voxel_y >=-20 )  VoxelType = 85;//86;
          else if (Voxel_y < -20 ) VoxelType = 3;
          else               VoxelType = 0;
        }

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}
*/

void ZWorldGenesis::GenerateZone_AcidHills(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;
  double P1, P2,P3,P4;
//  ZGenericByteCanva Canva;
  ZVector3L SectorStart;
  UByte Stencil;
//  ZLineCoords LineCoords;

/*
  Canva.SetSize(256,256);
  Canva.Clear(0);
  // Canva.DrawCircleFilled(128.0,128.0,128.0,1);
  Canva.Polygon_Start();
  LineCoords = {{0.0  ,128.0},{128.0,255.0}}; Canva.Polygon_Segment(&LineCoords);
  LineCoords = {{128.0,255.0},{255.0,128.0}}; Canva.Polygon_Segment(&LineCoords);
  LineCoords = {{255.0,128.0},{128.0,0.0  }}; Canva.Polygon_Segment(&LineCoords);
  LineCoords = {{128.0,0.0  },{0.0,128.0  }}; Canva.Polygon_Segment(&LineCoords);
  Canva.Polygon_Render(1);
*/


  SectorStart.x = (VoxelSector->Pos_x << ZVOXELBLOCSHIFT_X) & 255;
  SectorStart.z = (VoxelSector->Pos_z << ZVOXELBLOCSHIFT_Z) & 255;
  SectorStart.y = (VoxelSector->Pos_y << ZVOXELBLOCSHIFT_Y);

  VoxelSector->Flag_IsActiveVoxels = true;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);

      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 30 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 30 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 30 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 30 ;

      height = Interpolation_2d(P1,P2,P3,P4,Coef1,Coef2) - 15 ;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      Stencil = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );

      for (y=0, Voxel_y = (Sector_y << ZVOXELBLOCSHIFT_Y) - HeightOffset  ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0)
        {
          if (Voxel_y > 0) VoxelType = 0;
          else VoxelType = 0;
        }
        else          VoxelType = 10;

        if (Stencil==0)
        {
          if (Voxel_y < -10 && Voxel_y >=-20 )  VoxelType = 86;//86;
          else if (Voxel_y < -20 ) VoxelType = 10;
          else               VoxelType = 0;
        }

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}



void ZWorldGenesis::GenerateZone_LavaRiver(ZVoxelSector * VoxelSector)
{
  ZVector3L Zone, SectorStart;
  ZGenericCanva<UByte> RiverCanva;
  Long x,y,z;
  UByte Draw;
  Long Depth;
  UShort VoxelType;

  Long RiverSize = 48;
  Long RiverDepth = 64;


  RiverCanva.SetSize(256,256);
  Zone.x = (VoxelSector->Pos_x >> (8 - ZVOXELBLOCSHIFT_X))+(Z_GENESISMAP_SIZE >> 1);
  Zone.z = (VoxelSector->Pos_z >> (8 - ZVOXELBLOCSHIFT_Z))+(Z_GENESISMAP_SIZE >> 1);

  SectorStart.x = (VoxelSector->Pos_x << ZVOXELBLOCSHIFT_X) & 255;
  SectorStart.z = (VoxelSector->Pos_z << ZVOXELBLOCSHIFT_Z) & 255;
  SectorStart.y = (VoxelSector->Pos_y << ZVOXELBLOCSHIFT_Y);

  RiverCanva.Clear();

  if ( ConvCN[ (ZMemSize)ZoneMap_New[Zone.x-1][Zone.z  ] ] == 7 ) RiverCanva.DrawBox(0,128-RiverSize/2,127,128+RiverSize/2,1);
  if ( ConvCN[ (ZMemSize)ZoneMap_New[Zone.x+1][Zone.z  ] ] == 7 ) RiverCanva.DrawBox(128,128-RiverSize/2,255,128+RiverSize/2,1);
  if ( ConvCN[ (ZMemSize)ZoneMap_New[Zone.x  ][Zone.z-1] ] == 7 ) RiverCanva.DrawBox(128-RiverSize/2, 0, 128+RiverSize/2, 127, 1);
  if ( ConvCN[ (ZMemSize)ZoneMap_New[Zone.x  ][Zone.z+1] ] == 7 ) RiverCanva.DrawBox(128-RiverSize/2, 128, 128+RiverSize/2, 255, 1);
  RiverCanva.DrawCircleFilled(128,128,((double)RiverSize) / 2.0, 1,1.0);

  //RiverCanva.DebugDump();
  for (x=0;x<ZVOXELBLOCSIZE_X;x++)
  {
    for (z=0;z<ZVOXELBLOCSIZE_Z;z++)
    {
      Draw = RiverCanva.GetPoint_Fast(SectorStart.x+x,SectorStart.z+z);
      for (y=0;y<ZVOXELBLOCSIZE_Y;y++)
      {
        Depth = SectorStart.y + y;

        VoxelType = 0;
        if  (Draw>0)
        {
          if (Depth<(-RiverDepth)) VoxelType = 52;
        }
        else if (Depth<0)          VoxelType = 3;
        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }

  }

}

void ZWorldGenesis::GenerateZone_BigMountains(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height, height2,sx,sz;

  sx = Sector_x << ZVOXELBLOCSHIFT_X;
  sz = Sector_z << ZVOXELBLOCSHIFT_Z;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      // Linear altitude augmentation

      height = GetHeightMap(sx + x,sz + z) * 100;

      // Chaotic relief

      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);
      double P1,P2,P3,P4;
      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 30 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 30 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 30 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 30 ;

      height2 = Interpolation_2d(P1 + height,P2+height,P3+height,P4+height,Coef1,Coef2) - 15 ;

      if (height < 16.0) height2*= height / 16.0;


      height = height2 + HeightOffset;


      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 54;

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}

void ZWorldGenesis::GenerateZone_BlackWoods(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;
  double P1, P2,P3,P4;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);

      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 30 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 30 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 30 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 30 ;

      height = Interpolation_2d(P1,P2,P3,P4,Coef1,Coef2) - 15 + BlackWoods_Level ;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 66;

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}



void ZWorldGenesis::AddTreeOn(ZVoxelSector * Sector, ZVoxelSector ** TemplateTable, ULong ModelCount, UShort VoxelType)
{
  Long x,y,z,i;
  ULong Rnd;
  ZVoxelSector * Template;
  ZVector3L Pos;
  i=0;
  for (z=0;z<ZVOXELBLOCSIZE_Z; z++)
    for (x=0;x<ZVOXELBLOCSIZE_X; x++)
      for (y=0;y<ZVOXELBLOCSIZE_Y; y++)
      {
        if (Sector->Data[i] == VoxelType &&  y<60 && (Rnd =RandomGen.GetNumber(i))<200000000) //100000000
        {
          if (Sector->Data[i+1]==0)
          {
            Template = TemplateTable[Rnd % ModelCount];
            Pos.x = x - Template->Handle_x; Pos.y = y+1 - Template->Handle_y; Pos.z = z - Template->Handle_z;
            //Sector->SetCube(Pos.x,Pos.y+1,Pos.z,1);
            Sector->BlitSector(Template, &Pos );
          }
        }

        i++;
      }

}

void ZWorldGenesis::Generate_Terrain_1536(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, nx,ny,nz;
  UShort VoxelType;
  double dns,cns, reduce, P[8], C[8], Coef1,Coef2,Coef3;
  ULong Rx,Ry,Rz;
  VoxelSector->Flag_NeedSortedRendering = true;

  UShort Textures[16];
  Textures[0] = 232; // 1
  Textures[1] = 233; // 12
  Textures[2] = 233; // 14
/*
  Textures[0] = 1; // 1
  Textures[1] = 2; // 12
  Textures[2] = 3; // 14
*/
  Long sx = ((Sector_x+8192) << ZVOXELBLOCSHIFT_X);
  Long sy = ((Sector_y+8192) << ZVOXELBLOCSHIFT_Y);
  Long sz = ((Sector_z+8192) << ZVOXELBLOCSHIFT_Z);

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
      for (y=0 ; y<ZVOXELBLOCSIZE_Y ; y++)
      {
        nx = sx + x;
        ny = sy + y;
        nz = sz + z;

        Rx = (sx + x) >> 4; Ry = (sy + y) >> 4; Rz = (sz + z) >> 4;
        P[0] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[1] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[2] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[3] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[4] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[5] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[6] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[7] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz+1) ) % 30 ;
        Coef1 = ((sx + x) % 16) * (1.0 / 16.0);
        Coef3 = ((sy + y) % 16) * (1.0 / 16.0);
        Coef2 = ((sz + z) % 16) * (1.0 / 16.0);
        dns = Interpolation_3d(P,Coef1,Coef2,Coef3);

        Ry = (sy + y + 1) >> 4;
        C[0] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[1] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[2] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz+  1) ) % 30 ;
        C[3] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz+  1) ) % 30 ;
        C[4] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[5] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[6] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz+  1) ) % 30 ;
        C[7] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz+  1) ) % 30 ;

        Coef3 = ((sy + y + 1) % 16) * (1.0 / 16.0);
        cns = Interpolation_3d(C,Coef1,Coef2,Coef3);

        VoxelType = Textures[(ULong)floor((cns/20.0))];

        // VoxelType = 32768;
        reduce = ( ((double)(sy + y + (-524288 +20) - HeightOffset)) / 10.0); // 5.0
        if (reduce < 0.0) reduce = 0.0;
        dns -= reduce;
        cns -= reduce;
        if   (dns< 15.0) {dns = 0.0;VoxelType=0;} //15.0
        else
        {
          if ( (dns - cns) > 0.3) VoxelType = Textures[0];
          else if (dns-cns < -0.2) VoxelType = Textures[2];
          else {VoxelType = Textures[1]; if ((RandomGen.GetNumber(nx) + RandomGen.GetNumber(ny) + RandomGen.GetNumber(nz)) < 10000000) VoxelType = 46;}
        }

        // if (Sector_y > 1) VoxelType = 0;
        VoxelSector->SetCube(x,y,z, VoxelType);
      }
}

void  ZWorldGenesis::GenerateZone_CuttedSinusArea(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      //ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      //ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      double sx = (((Sector_x & 15) << 4) + x) % 128; //Sx and Sz range from 0 to 255
      double sz = (((Sector_z & 15) << 4) + z) % 128;

     //if (sx > 32) sx = 0;

      height = sin( sx*(3.141592654/64.0)) +  sin( sz*(3.141592654/64.0)) * 32.0;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 48;

/*
        if      (Deep >=0 )    {VoxelType = 0; }
        else if (Deep < -1536) {VoxelType = 43;}
        else if (Deep < -1280) {VoxelType = 10;}
        else if (Deep < -1024) {VoxelType = 5; }
        else if (Deep < -768)  {VoxelType = 4; }
        else if (Deep < -512)  {VoxelType = 6; }
        else if (Deep < -256)  {VoxelType = 7; }
        else if (Deep < -128)  {VoxelType = 2; }
        else if (Deep < -32)   {VoxelType = 3; }
        else if (Deep < 0)     {VoxelType = 1; }
        else                    VoxelType = 0;
*/


        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}

void ZWorldGenesis::GenerateZone_PureSinusArea(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      //ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      //ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      double sx = (((Sector_x & 15) << 4) + x); //Sx and Sz range from 0 to 255
      double sz = (((Sector_z & 15) << 4) + z);

      height = sin( sx*(3.141592654/32.0) ) * sin( sz*(3.14159265/32.0) ) * 32.0;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 48;

/*
        if      (Deep >=0 )    {VoxelType = 0; }
        else if (Deep < -1536) {VoxelType = 43;}
        else if (Deep < -1280) {VoxelType = 10;}
        else if (Deep < -1024) {VoxelType = 5; }
        else if (Deep < -768)  {VoxelType = 4; }
        else if (Deep < -512)  {VoxelType = 6; }
        else if (Deep < -256)  {VoxelType = 7; }
        else if (Deep < -128)  {VoxelType = 2; }
        else if (Deep < -32)   {VoxelType = 3; }
        else if (Deep < 0)     {VoxelType = 1; }
        else                    VoxelType = 0;
*/


        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}






void ZWorldGenesis::GenerateZone_NaturalMountains(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;
  double P1, P2,P3,P4;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      ULong sx = (Sector_x << ZVOXELBLOCSHIFT_X) + x;
      ULong sz = (Sector_z << ZVOXELBLOCSHIFT_Z) + z;
      ULong rx = sx >> 4; double Coef1 = (sx % 16) * (1.0 / 16.0);
      ULong rz = sz >> 4; double Coef2 = (sz % 16) * (1.0 / 16.0);

      P1 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz) ) % 30 ;
      P2 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz) ) % 30 ;
      P3 = (RandomGen.GetNumber(rx) + RandomGen.GetNumber(rz+1) ) % 30 ;
      P4 = (RandomGen.GetNumber(rx+1) + RandomGen.GetNumber(rz+1) ) % 30 ;

      height = Interpolation_2d(P1,P2,P3,P4,Coef1,Coef2) - 15 ;

      // height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 48;

/*
        if      (Deep >=0 )    {VoxelType = 0; }
        else if (Deep < -1536) {VoxelType = 43;}
        else if (Deep < -1280) {VoxelType = 10;}
        else if (Deep < -1024) {VoxelType = 5; }
        else if (Deep < -768)  {VoxelType = 4; }
        else if (Deep < -512)  {VoxelType = 6; }
        else if (Deep < -256)  {VoxelType = 7; }
        else if (Deep < -128)  {VoxelType = 2; }
        else if (Deep < -32)   {VoxelType = 3; }
        else if (Deep < 0)     {VoxelType = 1; }
        else                    VoxelType = 0;
*/


        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}





void ZWorldGenesis::GenerateZone_RandomStickSea(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;
  Long height;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      double sx = (((Sector_x & 15) << 4) + x); //Sx and Sz range from 0 to 255
      double sz = (((Sector_z & 15) << 4) + z);

      height = ((RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15) + HeightOffset ;

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 54;

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}



void ZWorldGenesis::GenerateZone_MathStruct_1(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, Voxel_y, Deep;
  UShort VoxelType;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      double sx = (((Sector_x & 15) << 4) + x); //Sx and Sz range from 0 to 255
      double sz = (((Sector_z & 15) << 4) + z);

      if (sx>128) sx = 256-sx;
      if (sz>128) sz = 256-sz;
      //ULong height = sin(sx/81.487330852) * sin(sz/81.487330852) * 50 - 1 ;
      //ULong height = sin(sx/81.487330852) * sin(sz/81.487330852) * ( sx * sz / 20.0 );
      //ULong height = sin(sx/(81.487330852/4.0)) * sin(sz/(81.487330852/4.0)) * ( sx * sz / 20.0 );
      ULong height = sin(sin(sx/(81.487330852)) * sin(sz/(81.487330852))*50.0 ) * ( sx * sz / 100.0 ) + HeightOffset;


      // height = Sector_x + Sector_z;
      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = 53;
        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}


void ZWorldGenesis::GenerateZone_Mountains(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z;

  Long Voxel_y, Deep;
  UShort VoxelType;

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {
      Long Cube_x = (abs(Sector_x) << ZVOXELBLOCSHIFT_X) | x;
      Long Cube_z = (abs(Sector_z) << ZVOXELBLOCSHIFT_Z) | z;
      ULong F1 = Sector_x >> 2;
      ULong F1p = (Sector_x + 1) >> 2;

      double F1_Coef = (Cube_x & 0x3F) / 64.0;
      ULong F2 = Sector_z >> 2;
      ULong F2p = (Sector_z + 1) >> 2;
      double F2_Coef = (Cube_z & 0x3F) / 64.0;

      double Mult1_1 =  ((double)RandomGen.GetNumber(F1)) / 42949672.0 ;
      double Mult1_2 =  ((double)RandomGen.GetNumber(F1p)) / 42949672.0 ;
      double Mult1 = Mult1_1 * F1_Coef + Mult1_2 * ( 1.0 - F1_Coef);

      double Mult2_1 =  ((double)RandomGen.GetNumber(F2)) / 42949672.0 ;
      double Mult2_2 =  ((double)RandomGen.GetNumber(F2p)) / 42949672.0 ;
      double Mult2 = Mult2_1 * F2_Coef + Mult2_2 * ( 1.0 - F2_Coef);



      ULong height = sin( ((double)x + (Sector_x << ZVOXELBLOCSHIFT_X)) /  Mult1 ) * sin( ((double)z + (Sector_z << ZVOXELBLOCSHIFT_Z)) / Mult2) * 25.0;
      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if      (Deep >=0 )    {VoxelType = 0; }
        else if (Deep < -1536) {VoxelType = 43;}
        else if (Deep < -1280) {VoxelType = 10;}
        else if (Deep < -1024) {VoxelType = 5; }
        else if (Deep < -768)  {VoxelType = 4; }
        else if (Deep < -512)  {VoxelType = 6; }
        else if (Deep < -256)  {VoxelType = 7; }
        else if (Deep < -128)  {VoxelType = 2; }
        else if (Deep < -32)   {VoxelType = 3; }
        else if (Deep < 0)     {VoxelType = 1; }
        else                    VoxelType = 0;

        if (VoxelType!=0 && height > 20) VoxelType = 10;

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}

void ZWorldGenesis::GenerateBigTrees(ZVoxelSector * Sector)
{
  Long x,z, xs,ys,zs, GenerationRadius;
  ZLightSpeedRandom Random;
  ZVoxelGfx_Tree           TreeMaker;
  ZVoxelGfx_Tree_Straight  TreeMaker_2;
  ZVoxelGfx_Tree_Giant     TreeMaker_3;
  //Long Seed;
  UShort ZoneType = 0;
  ULong RandNum, TreeType;
  bool ZoneOk;

  xs = Sector->Pos_x << ZVOXELBLOCSHIFT_X;
  ys = Sector->Pos_y << ZVOXELBLOCSHIFT_Y;
  zs = Sector->Pos_z << ZVOXELBLOCSHIFT_Z;
  //Seed = xs + 3524*ys + 234 * zs;

/*
  Sector->SetCube(0,20,0, 2);
  Sector->SetCube(15,20,15, 2);
  return;
*/
  GenerationRadius = 150;

  for (x=xs-GenerationRadius ; x<xs+GenerationRadius;x++)
   for (z=zs-GenerationRadius;z<zs+GenerationRadius;z++)
   {
     if ((RandNum = Random.GetNumber( abs(x) + ( abs(z) << 8 ) )) < (4194304 /3)) // 6
     {
       ZVector3d Position;
       Position.x = x-xs;
       Position.z = z-zs;
       Position.y = GetZoneHeight(x,z, ZoneType) - ys;
       TreeMaker.Seed = abs(x)*3+((abs(z)<<9)*5);
       TreeMaker_2.Seed = TreeMaker.Seed;
       TreeType = RandNum & 7;

       ZoneOk = (ZoneType == 5);
       switch(TreeType)
       {
         case 0:
         case 1:
         case 2:
                 if (Position.y>-128 && Position.y < 64 && ZoneOk) TreeMaker.DrawTree(Sector,&Position);
                 break;

         case 3:
         case 4:
         case 5:
         case 6:
                 if (Position.y>-192 && Position.y < 64 && ZoneOk) TreeMaker_2.DrawTree(Sector,&Position);
                 break;
         case 7: if (Position.y>-1024 && Position.y < 64 && ZoneOk)TreeMaker_3.DrawTree(Sector,&Position);
                 break;
       }
     }
   }
}


void ZWorldGenesis::GenerateZone_Flat(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long y,Voxel_y;
  ULong i, RandomSeed, RandomNumber;
  UShort TypeTable[ZVOXELBLOCSIZE_Y];
  bool   MineralInclude[ZVOXELBLOCSIZE_Y];
  UShort Type, * Data = VoxelSector->Data;

  VoxelSector->Flag_Void_Transparent = true;
  VoxelSector->Flag_Void_Regular     = true;


  RandomSeed = (RandomGen.GetNumber(Sector_x & ZLIGHTSPEEDRANDOM_LENMASK ) ^ RandomGen.GetNumber(Sector_y & ZLIGHTSPEEDRANDOM_LENMASK) ^ RandomGen.GetNumber(Sector_z & ZLIGHTSPEEDRANDOM_LENMASK)) & ZLIGHTSPEEDRANDOM_LENMASK;

  for (y=0, Voxel_y = (Sector_y << ZVOXELBLOCSHIFT_Y) ;y<ZVOXELBLOCSIZE_Y;y++,Voxel_y++)
  {
    Type=0;
    if      (Voxel_y >=0 )    Type = 0;
    else if (Voxel_y < -1536)  {Type = 43; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -1280)  {Type = 10; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -1024)  {Type = 5; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -768)  {Type = 4; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -512)  {Type = 6; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -256)  {Type = 7; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -128)  {Type = 2; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -32)  {Type = 3; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < 0)   {Type = 1; VoxelSector->Flag_Void_Regular = false; }
    else                     Type = 0;
    TypeTable[y]= Type;

    MineralInclude[y] = ( (Voxel_y < -1L) && (Type != 0));
  }

  UShort LastMineral = 0;
  for (i=0;i< (ZVOXELBLOCSIZE_X*ZVOXELBLOCSIZE_Y*ZVOXELBLOCSIZE_Z) ;i++)
  {
    Data[i] = TypeTable[ i & ZVOXELBLOCMASK_Y ];
    if (MineralInclude[i & ZVOXELBLOCMASK_Y])
    {
      RandomNumber = RandomGen.GetNumber((i) + RandomSeed);

    //if (RandomNumber < 42949672UL) Data[i]=26;
    //if (RandomNumber < 4294967UL)  Data[i]=27;
      if (RandomNumber < InclusionQuantity )
      {
        switch (RandomNumber & 0xf)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:  LastMineral = 74; break; // Fer
          case 6:  LastMineral = 112; break; // Cuivre
          case 7:  LastMineral = 26; break; // Or
          case 8:  LastMineral = 28; break; // Amethiste
          case 9:  LastMineral = 109; break; // Diamond.
          case 10: LastMineral = 110; break; // Nickel
          case 11: LastMineral = 44; break; // Vitrail bleu/blanc
          case 12: LastMineral = 46; break; // Pierre vitrifiée
          case 13: LastMineral = 47; break; // Emeraude ?
          case 14: LastMineral = 60; break; // Charbon
          case 15: LastMineral = 111; break; // Uranium
        }
      }
      if (LastMineral!=0)
      {
        switch(LastMineral)
        {
          default:
            if ((RandomNumber & 3)!=0) Data[i] = LastMineral;
            else                       LastMineral = 0;
            break;
        }
      }
    }
  }

  // if (Pos_y<0) {Cnt=1;Flag_Void_Regular=false;Flag_Void_Transparent=true;}
  // if (Pos_y>=0){Cnt=0;Flag_Void_Regular=true;Flag_Void_Transparent=true;}

  if (VoxelSector->Pos_x == 0 && VoxelSector->Pos_y == 0 && VoxelSector->Pos_z == -2 && COMPILEOPTION_ALLOWSTARTINGSTORAGE)
  {
    ZVoxelExtension_Storage * StorageExtension;

    StorageExtension = new ZVoxelExtension_Storage();
    StorageExtension->VoxelType[0]=42;  StorageExtension->VoxelQuantity[0] = 1;
    StorageExtension->VoxelType[1]=75;  StorageExtension->VoxelQuantity[1] = 1;

    VoxelSector->SetCube_WithExtension(8,0,8, 49, (ZMemSize)StorageExtension);
  }


}
















void ZWorldGenesis::GenerateZone_Flat2(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long y,Voxel_y;
  ULong i, RandomSeed, RandomNumber;
  UShort TypeTable[ZVOXELBLOCSIZE_Y];
  bool   MineralInclude[ZVOXELBLOCSIZE_Y];

  UShort Type, * Data = VoxelSector->Data;

  VoxelSector->Flag_Void_Transparent = true;
  VoxelSector->Flag_Void_Regular     = true;

  // Probabilizer

  ZInclusionProbabilizer Probabilizer;

  Long Deepness = Sector_y;

  // Deepness = -2;

  switch(Deepness)
  {
    case -1:
    default:
               Probabilizer.AddEntry(44, 0, 0.1);   // Matériau X
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(112,1, 1.0);   // Cuivre
               Probabilizer.AddEntry(127,1, 0.4);   // Etain
               // Rare ores
               Probabilizer.AddEntry( 26, 0, 0.1);  // Or
               Probabilizer.AddEntry( 74, 0, 0.05); // Fer
               break;
    case -2:
               Probabilizer.AddEntry(26, 0, 0.1);   // Or
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 0.1);   // Fer
               Probabilizer.AddEntry(110, 1, 0.2);  // Nickel
               Probabilizer.AddEntry(121, 1, 0.2);  // Chrome
               break;
    case -3:
               Probabilizer.AddEntry(26, 0, 0.1);   // Or
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 1.0);   // Fer
               Probabilizer.AddEntry(110, 1, 0.5);  // Nickel
               Probabilizer.AddEntry(121, 1, 0.5);  // Chrome
               Probabilizer.AddEntry(150, 1, 0.5);  // Plomb
               break;
    case -4:
               Probabilizer.AddEntry(26, 0, 0.2);   // Or
               Probabilizer.AddEntry(27, 1, 0.05);  // Amethyste
               Probabilizer.AddEntry(47, 1, 0.05);  // Emeraude
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 2.0);   // Fer
               Probabilizer.AddEntry(109, 1, 0.04); // Diamond
               Probabilizer.AddEntry(110, 1, 1.0);  // Nickel
               Probabilizer.AddEntry(121, 1, 1.0);  // Chrome
               Probabilizer.AddEntry(122, 1, 0.05); // Titanium
               Probabilizer.AddEntry(127, 1, 1.0);   // Etain
               Probabilizer.AddEntry(150, 1, 1.0);  // Plomb
               break;
    case -5:
               Probabilizer.AddEntry(26, 0, 0.2);   // Or
               Probabilizer.AddEntry(27, 1, 0.05);  // Amethyste
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 2.0);   // Fer
               Probabilizer.AddEntry(109, 1, 0.05); // Diamond
               Probabilizer.AddEntry(110, 1, 1.0);  // Nickel
               Probabilizer.AddEntry(121, 1, 1.0);  // Chrome
               Probabilizer.AddEntry(122, 1, 0.05); // Titanium
               Probabilizer.AddEntry(150, 1, 1.0);  // Plomb
               break;
    case -6:
               Probabilizer.AddEntry(26, 0, 0.2);   // Or
               Probabilizer.AddEntry(27, 1, 0.05);  // Amethyste
               Probabilizer.AddEntry(47, 1, 0.045); // Emeraude
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 2.0);   // Fer
               Probabilizer.AddEntry(109, 1, 0.1);  // Diamond
               Probabilizer.AddEntry(110, 1, 1.0);  // Nickel
               Probabilizer.AddEntry(121, 1, 1.0);  // Chrome
               Probabilizer.AddEntry(122, 1, 0.05); // Titanium
               Probabilizer.AddEntry(150, 1, 1.0);  // Plomb
               break;
    case -7:
               Probabilizer.AddEntry(26, 0, 0.2);   // Or
               Probabilizer.AddEntry(27, 1, 0.05);  // Amethyste
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 2.0);   // Fer
               Probabilizer.AddEntry(110, 1, 1.0);  // Nickel
               Probabilizer.AddEntry(121, 1, 1.0);  // Chrome
               Probabilizer.AddEntry(122, 1, 0.05); // Titanium
               Probabilizer.AddEntry(150, 1, 1.0);  // Plomb
               break;
    case -8:
               Probabilizer.AddEntry(26, 0, 0.2);   // Or
               Probabilizer.AddEntry(27, 1, 0.05);  // Amethyste
               Probabilizer.AddEntry(46, 1, 0.05);  // Rose des sables
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 2.0);   // Fer
               Probabilizer.AddEntry(110, 1, 1.0);  // Nickel
               Probabilizer.AddEntry(111, 1, 0.05); // Uranium
               Probabilizer.AddEntry(121, 1, 1.0);  // Chrome
               Probabilizer.AddEntry(122, 1, 0.05); // Titanium
               Probabilizer.AddEntry(150, 1, 1.0);  // Plomb
               break;
    case -9:
               Probabilizer.AddEntry(26, 0, 0.2);   // Or
               Probabilizer.AddEntry(27, 1, 0.05);  // Amethyste
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(74, 1, 2.0);   // Fer
               Probabilizer.AddEntry(110, 1, 1.0);  // Nickel
               Probabilizer.AddEntry(111, 1, 0.05); // Uranium
               Probabilizer.AddEntry(121, 1, 1.0);  // Chrome
               Probabilizer.AddEntry(122, 1, 0.05); // Titanium
               Probabilizer.AddEntry(197, 1, 1.0);  // Aluminium Ore
               break;
    case -10:  // Water level
               Probabilizer.AddEntry(10, 2, 15.0);
               break;



/*
    case -1:
    default:
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(112,1, 1.0);   // Cuivre
               Probabilizer.AddEntry(127,1, 0.4);   // Etain
               Probabilizer.AddEntry( 44, 0, 0.10); // Vitrail
               // Rare ores
               Probabilizer.AddEntry( 74, 0, 0.05);  // Fer
               Probabilizer.AddEntry( 26, 0, 0.1); // Or
               break;
    case -2:

               Probabilizer.AddEntry( 74, 1, 1.0);  // Fer
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry( 26, 0, 0.1); // Or
               Probabilizer.AddEntry(110, 1, 0.2); // Nickel
               Probabilizer.AddEntry(121, 1, 0.2); // Chrome
      break;
*/
  }

  ULong FenceBound = Probabilizer.ComputeProbabilities(1.0);

  // Random Seed for that particular sector.

  RandomSeed = (RandomGen.GetNumber(Sector_x & ZLIGHTSPEEDRANDOM_LENMASK ) ^ RandomGen.GetNumber(Sector_y & ZLIGHTSPEEDRANDOM_LENMASK) ^ RandomGen.GetNumber(Sector_z & ZLIGHTSPEEDRANDOM_LENMASK)) & ZLIGHTSPEEDRANDOM_LENMASK;

  // Layers of ground.

  for (y=0, Voxel_y = (Sector_y << ZVOXELBLOCSHIFT_Y)-HeightOffset ;y<ZVOXELBLOCSIZE_Y;y++,Voxel_y++)
  {
    Type=0;
    if      (Voxel_y >=0 )      Type = 0;
    else if (Voxel_y < -2176)   {Type = 126; VoxelSector->Flag_Void_Regular = false;} // Bleu
    else if (Voxel_y < -2043)   {Type = 3; VoxelSector->Flag_Void_Regular = false;}   // Vert
    else if (Voxel_y < -2038)   {Type = 52; VoxelSector->Flag_Void_Regular = false;}  // Lave
    else if (Voxel_y < -2028)   {Type = 0; VoxelSector->Flag_Void_Regular = false;}   // Vide
    else if (Voxel_y < -1984)   {Type = 3; VoxelSector->Flag_Void_Regular = false;}   // Vert
    else if (Voxel_y < -1856)   {Type = 5; VoxelSector->Flag_Void_Regular = false;}   // Bleu ciel
    else if (Voxel_y < -1728)   {Type = 2; VoxelSector->Flag_Void_Regular = false;}   // Orange
    else if (Voxel_y < -1600)   {Type = 3; VoxelSector->Flag_Void_Regular = false;}   // Vert
    else if (Voxel_y < -1472)   {Type = 1; VoxelSector->Flag_Void_Regular = false;}   // Bleu
    else if (Voxel_y < -1339)   {Type = 10; VoxelSector->Flag_Void_Regular = false;}  // Blanc
    else if (Voxel_y < -1334)   {Type = 86; VoxelSector->Flag_Void_Regular = false; VoxelSector->Flag_IsActiveVoxels = true;}  // Acide
    else if (Voxel_y < -1324)   {Type = 0; VoxelSector->Flag_Void_Regular = false;}   // Vide
    else if (Voxel_y < -1280)   {Type = 10; VoxelSector->Flag_Void_Regular = false;}  // Blanc
    else if (Voxel_y < -1152)   {Type = 5; VoxelSector->Flag_Void_Regular = false;}   // Bleu ciel
    else if (Voxel_y < -1024)   {Type = 2; VoxelSector->Flag_Void_Regular = false;}   // Orange
    else if (Voxel_y < -896)    {Type = 1; VoxelSector->Flag_Void_Regular = false;}   // Vert
    else if (Voxel_y < -768)    {Type = 1; VoxelSector->Flag_Void_Regular = false;}   // Bleu
    else if (Voxel_y < -635)    {Type = 10; VoxelSector->Flag_Void_Regular = false;}  // Blanc
    else if (Voxel_y < -630)    {Type = 85; VoxelSector->Flag_Void_Regular = false; VoxelSector->Flag_IsActiveVoxels = true; VoxelSector->Flag_NeedSortedRendering = true; }  // Eau
    else if (Voxel_y < -620)    {Type = 0; VoxelSector->Flag_Void_Regular = false;}   // Vide
    else if (Voxel_y < -576)    {Type = 10; VoxelSector->Flag_Void_Regular = false;}  // Blanc
    else if (Voxel_y < -512)    {Type = 7; VoxelSector->Flag_Void_Regular = false;}   // Rose
    else if (Voxel_y < -448)    {Type = 9; VoxelSector->Flag_Void_Regular = false;}   // Gris
    else if (Voxel_y < -384)    {Type = 8; VoxelSector->Flag_Void_Regular = false;}   // Vert citron
    else if (Voxel_y < -320)    {Type = 4; VoxelSector->Flag_Void_Regular = false;}   // Rouge
    else if (Voxel_y < -256)    {Type = 6; VoxelSector->Flag_Void_Regular = false;}   // Jaune
    else if (Voxel_y < -192)    {Type = 5; VoxelSector->Flag_Void_Regular = false;}   // Bleu ciel
    else if (Voxel_y < -128)    {Type = 2; VoxelSector->Flag_Void_Regular = false;}   // Orange
    else if (Voxel_y < -64)     {Type = 3; VoxelSector->Flag_Void_Regular = false;}   // Vert
    else if (Voxel_y < 0)       {Type = 1; VoxelSector->Flag_Void_Regular = false;}   // Bleu
    else                        Type = 0;

    /*
    if      (Voxel_y >=0 )      Type = 0;
    else if (Voxel_y < -960)  {Type = 126; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -768)  {Type = 1; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -630)  {Type = 10; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -625)  {Type = 85; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -615)  {Type = 0; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -576)  {Type = 10; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -512)  {Type = 7; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -448)  {Type = 9; VoxelSector->Flag_Void_Regular = false;}
    else if (Voxel_y < -384)  {Type = 8; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -320)   {Type = 4; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -256)   {Type = 6; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -192)   {Type = 5; VoxelSector->Flag_Void_Regular = false; }
    else if (Voxel_y < -128)   {Type = 2; VoxelSector->Flag_Void_Regular = false; } // Orange
    else if (Voxel_y < -64)    {Type = 3; VoxelSector->Flag_Void_Regular = false; } // Vert
    else if (Voxel_y < 0)      {Type = 1; VoxelSector->Flag_Void_Regular = false; } // Bleu
    else                        Type = 0;
    */

    TypeTable[y]= Type;

    //TypeTable[y]= 0; // debug

    MineralInclude[y] = ( (Voxel_y < -5L) && (Type != 0));
  }

  // If sector is void, fill it more quickly
  if (VoxelSector->Flag_Void_Regular)
  {
    for (i=0; i < (ZVOXELBLOCSIZE_X*ZVOXELBLOCSIZE_Y*ZVOXELBLOCSIZE_Z) ; i++) Data[i]=0;
    return;
  }

  // Fill zone with inclusions

  UShort LastMineral = 0;
  ULong  Num=0;
  ULong  RepeatChance;

  for (i=0;i< (ZVOXELBLOCSIZE_X*ZVOXELBLOCSIZE_Y*ZVOXELBLOCSIZE_Z) ;i++)
  {
    Data[i] = TypeTable[ i & ZVOXELBLOCMASK_Y ];
    if (MineralInclude[i & ZVOXELBLOCMASK_Y])
    {
      RandomNumber = RandomGen.GetNumber((i) + RandomSeed);
      if (RandomNumber < FenceBound )
      {
        RandomNumber = RandomGen.GetNumber((i + 8) + RandomSeed);

        Num = Probabilizer.GetTypeNum(RandomNumber);
        Data[i] = LastMineral = Probabilizer.GetVoxelType(Num);
      }
      else if (LastMineral!=0)
      {
        RepeatChance = Probabilizer.GetRepeatChance(Num);
        if ((RandomNumber & RepeatChance )!=0) Data[i] = LastMineral;
        else                                   LastMineral = 0;
      }
      // LastMineral = 0;
    }
  }

  // if (Pos_y<0) {Cnt=1;Flag_Void_Regular=false;Flag_Void_Transparent=true;}
  // if (Pos_y>=0){Cnt=0;Flag_Void_Regular=true;Flag_Void_Transparent=true;}

  if (VoxelSector->Pos_x == 0 && VoxelSector->Pos_y == 0 && VoxelSector->Pos_z == -2 && COMPILEOPTION_ALLOWSTARTINGSTORAGE)
  {
    ZVoxelExtension_Storage * StorageExtension;

    StorageExtension = new ZVoxelExtension_Storage();
    StorageExtension->VoxelType[0]=42;  StorageExtension->VoxelQuantity[0] = 1;
    StorageExtension->VoxelType[1]=75;  StorageExtension->VoxelQuantity[1] = 1;

    VoxelSector->SetCube_WithExtension(8,0,8, 49, (ZMemSize)StorageExtension);
  }

}


void ZWorldGenesis::GenerateZone_FlatAcidResistant(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long y,Voxel_y;
  ULong i, RandomSeed, RandomNumber;
  UShort TypeTable[ZVOXELBLOCSIZE_Y];
  bool   MineralInclude[ZVOXELBLOCSIZE_Y];

  UShort Type, * Data = VoxelSector->Data;

  VoxelSector->Flag_Void_Transparent = true;
  VoxelSector->Flag_Void_Regular     = true;

  // Probabilizer

  ZInclusionProbabilizer Probabilizer;

  Long Deepness = Sector_y;

  // Deepness = -2;

  switch(Deepness)
  {
    case -1:
    default:
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry(112,1, 1.0);   // Cuivre
               Probabilizer.AddEntry(127,1, 0.4);   // Etain
               Probabilizer.AddEntry( 44, 0, 0.10); // Vitrail
               // Rare ores
               Probabilizer.AddEntry( 74, 0, 0.05);  // Fer
               Probabilizer.AddEntry( 26, 0, 0.1); // Or
               break;
    case -2:

               Probabilizer.AddEntry( 74, 1, 1.0);  // Fer
               Probabilizer.AddEntry(60, 1, 1.0);   // Charbon
               Probabilizer.AddEntry( 26, 0, 0.1); // Or
               Probabilizer.AddEntry(110, 1, 0.2); // Nickel
               Probabilizer.AddEntry(121, 1, 0.2); // Chrome
      break;
  }

  ULong FenceBound = Probabilizer.ComputeProbabilities(1.0);

  // Random Seed for that particular sector.

  RandomSeed = (RandomGen.GetNumber(Sector_x & ZLIGHTSPEEDRANDOM_LENMASK ) ^ RandomGen.GetNumber(Sector_y & ZLIGHTSPEEDRANDOM_LENMASK) ^ RandomGen.GetNumber(Sector_z & ZLIGHTSPEEDRANDOM_LENMASK)) & ZLIGHTSPEEDRANDOM_LENMASK;

  // Layers of ground.

  for (y=0, Voxel_y = (Sector_y << ZVOXELBLOCSHIFT_Y)-HeightOffset ;y<ZVOXELBLOCSIZE_Y;y++,Voxel_y++)
  {
    Type=0;
    if      (Voxel_y >=0 )      Type = 0;
    else                       {Type = 10; VoxelSector->Flag_Void_Regular = false; }

    TypeTable[y]= Type;

    //TypeTable[y]= 0; // debug

    MineralInclude[y] = ( (Voxel_y < -5L) && (Type != 0));
  }

  // If sector is void, fill it more quickly
  if (VoxelSector->Flag_Void_Regular)
  {
    for (i=0; i < (ZVOXELBLOCSIZE_X*ZVOXELBLOCSIZE_Y*ZVOXELBLOCSIZE_Z) ; i++) Data[i]=0;
    return;
  }

  // Fill zone with inclusions

  UShort LastMineral = 0;
  ULong  Num=0;
  ULong  RepeatChance;

  for (i=0;i< (ZVOXELBLOCSIZE_X*ZVOXELBLOCSIZE_Y*ZVOXELBLOCSIZE_Z) ;i++)
  {
    Data[i] = TypeTable[ i & ZVOXELBLOCMASK_Y ];
    if (MineralInclude[i & ZVOXELBLOCMASK_Y])
    {
      RandomNumber = RandomGen.GetNumber((i) + RandomSeed);
      if (RandomNumber < FenceBound )
      {
        RandomNumber = RandomGen.GetNumber((i + 8) + RandomSeed);

        Num = Probabilizer.GetTypeNum(RandomNumber);
        Data[i] = LastMineral = Probabilizer.GetVoxelType(Num);
      }
      else if (LastMineral!=0)
      {
        RepeatChance = Probabilizer.GetRepeatChance(Num);
        if ((RandomNumber & RepeatChance )!=0) Data[i] = LastMineral;
        else                                   LastMineral = 0;
      }
      // LastMineral = 0;
    }
  }
}

void ZWorldGenesis::GenerateZone_DustField(ZVoxelSector * VoxelSector, Long Sector_x, Long Sector_y, Long Sector_z)
{
  ULong RandomSeed;

  UShort * Data, * DataEnd;


  RandomSeed = (RandomGen.GetNumber(Sector_x & ZLIGHTSPEEDRANDOM_LENMASK ) ^ RandomGen.GetNumber(Sector_y & ZLIGHTSPEEDRANDOM_LENMASK) ^ RandomGen.GetNumber(Sector_z & ZLIGHTSPEEDRANDOM_LENMASK)) & ZLIGHTSPEEDRANDOM_LENMASK;
  RandomGen.Init(RandomSeed);

  for (Data = VoxelSector->Data, DataEnd = Data + (ZVOXELBLOCSIZE_X*ZVOXELBLOCSIZE_Y*ZVOXELBLOCSIZE_Z) ; Data < DataEnd; Data++)
  {
    *Data = (RandomGen.GetNumber() & 1023 ) ? 0 : 203; // 255
  }

}

void ZWorldGenesis::GenerateZone_Generic_MappedTerrain(ZVoxelSector * VoxelSector, UShort TerrainVoxelType, ZGenericCanva<UByte> * TerrainMap, Long Offset)
{
  Long x,y,z, Voxel_y, Deep;
  Long Sector_y;
  UShort VoxelType;
  Long height;
  ZVector3L ZonePos;



  ULong ZoneSize = TerrainMap->Width; // Must also change it in the function giving the Zone Height.
  ULong ZoneMaxIndex = ZoneSize - 1;

  Sector_y = VoxelSector->Pos_y;
  ZonePos.x = ((VoxelSector->Pos_x << ZVOXELBLOCSHIFT_X) + Offset) & ZoneMaxIndex;
  ZonePos.z = ((VoxelSector->Pos_z << ZVOXELBLOCSHIFT_Z) + Offset) & ZoneMaxIndex;
  ZonePos.y = (VoxelSector->Pos_y << ZVOXELBLOCSHIFT_Y);

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
    {

      height = TerrainMap->GetPoint_Fast( ZoneMaxIndex - (ZonePos.x + x), ZonePos.z + z );

      for (y=0, Voxel_y = Sector_y << ZVOXELBLOCSHIFT_Y ; y<ZVOXELBLOCSIZE_Y ; y++, Voxel_y++)
      {
        Deep = Voxel_y - height;
        VoxelType = 0;

        if (Deep >=0) VoxelType = 0;
        else          VoxelType = TerrainVoxelType; //54;

        VoxelSector->SetCube(x,y,z, VoxelType);
      }
    }
}

void ZWorldGenesis::Generate_Generic_LittleStructs(ZVoxelSector * Sector, ZVoxelSector * ObjectToPlace, ZGenericCanva<UByte> * LocationMap, Long Offset )
{
  Long x,z, xs,ys,zs, GenerationRadius;
  ZLightSpeedRandom Random;
  ZVoxelGfx_Tree           TreeMaker;
  ZVoxelGfx_Tree_Straight  TreeMaker_2;
  ZVoxelGfx_Tree_Giant     TreeMaker_3;
  //Long Seed;
  UShort ZoneType;
  // ULong RandNum;


  xs = Sector->Pos_x << ZVOXELBLOCSHIFT_X;
  ys = Sector->Pos_y << ZVOXELBLOCSHIFT_Y;
  zs = Sector->Pos_z << ZVOXELBLOCSHIFT_Z;
  //Seed = xs + 3524*ys + 234 * zs;

/*
  Sector->SetCube(0,20,0, 2);
  Sector->SetCube(15,20,15, 2);
  return;
*/

  ULong SizeMask;

  SizeMask = (ULong)(LocationMap->Width - 1);
  GenerationRadius = 5;

  for (x = xs-GenerationRadius ; x< (xs + 16 + GenerationRadius) ;x++)
   for (z=zs-GenerationRadius; z < (zs+ 16 + GenerationRadius) ;z++)
   {
     //if ((RandNum = Random.GetNumber( abs(x) + ( abs(z) << 8 ) )) < (4194304 * 50)) // 6
     // if ( (((x & 7) == 0) && ((z & 7) == 0)) )

     if ( LocationMap->GetPoint_Fast( SizeMask - ((x + Offset) & SizeMask) , (z + Offset) & SizeMask ) >128 )
     {

       ZVector3L Position;
       ZVector3L Offset;

       Position.x = x-xs;
       Position.z = z-zs;
       Position.y = GetZoneHeight(x,z, ZoneType) - ys;

       Offset.x = Position.x;
       Offset.y = Position.y;
       Offset.z = Position.z;

       Offset.x -= T3dTemplate_1.Handle_x;
       Offset.y -= T3dTemplate_1.Handle_y;
       Offset.z -= T3dTemplate_1.Handle_z;

       if (Offset.y < 74 && Offset.y > -10)
       {
         // if ( (x== (75-512)) && (z==(103-512)) ) MANUAL_BREAKPOINT;
         // if (this->Canva_4.GetPoint_Secure(xs & 0xFF,zs & 0xFF))
         Sector->BlitSector(ObjectToPlace, &Offset);
       }
     }
   }
}

void ZWorldGenesis::Generate_Generic_PlaceVoxel(ZVoxelSector * Sector, UShort VoxelType, ZGenericCanva<UByte> * LocationMap, Long Offset, Long RelativeHeight,  bool SetActiveSector)
{
  Long x,z, xs,ys,zs, GenerationRadius;
  ZLightSpeedRandom Random;
  ZVoxelGfx_Tree           TreeMaker;
  ZVoxelGfx_Tree_Straight  TreeMaker_2;
  ZVoxelGfx_Tree_Giant     TreeMaker_3;
  //Long Seed;
  UShort ZoneType;
  // ULong RandNum, Ratio;


  xs = Sector->Pos_x << ZVOXELBLOCSHIFT_X;
  ys = Sector->Pos_y << ZVOXELBLOCSHIFT_Y;
  zs = Sector->Pos_z << ZVOXELBLOCSHIFT_Z;
  //Seed = xs + 3524*ys + 234 * zs;

  ULong SizeMask;
  SizeMask = (ULong)(LocationMap->Width - 1);

  GenerationRadius = 0;

  for (x = xs-GenerationRadius ; x< (xs + 16 + GenerationRadius) ;x++)
   for (z=zs-GenerationRadius; z < (zs+ 16 + GenerationRadius) ;z++)
   {
     // if ((RandNum = Random.GetNumber( abs(x) + ( abs(z) << 8 ) )) < (Ratio)) // 6
     // if ( (((x & 31) == 0) && ((z & 31) == 0)) )
     if ( LocationMap->GetPoint_Fast( SizeMask - ((x + Offset) & SizeMask) , (z + Offset) & SizeMask ) >128 )
     {

       ZVector3L Position;
       ZVector3L Offset;

       Position.x = x-xs;
       Position.z = z-zs;
       Position.y = (GetZoneHeight(x,z, ZoneType) - ys) + RelativeHeight;

       if (Position.y < 64 && Position.y > 0)
       {
         Sector->SetCube(Position.x, Position.y, Position.z, VoxelType);
         if (SetActiveSector) Sector->Flag_IsActiveVoxels = true;
       }

     }
   }
}



void ZWorldGenesis::GenerateAddBombs(ZVoxelSector * Sector, double Probability, UShort VoxelType, bool SetActiveSector)
{
  Long x,z, xs,ys,zs, GenerationRadius;
  ZLightSpeedRandom Random;
  ZVoxelGfx_Tree           TreeMaker;
  ZVoxelGfx_Tree_Straight  TreeMaker_2;
  ZVoxelGfx_Tree_Giant     TreeMaker_3;
  //Long Seed;
  UShort ZoneType;
  ULong RandNum, Ratio;


  xs = Sector->Pos_x << ZVOXELBLOCSHIFT_X;
  ys = Sector->Pos_y << ZVOXELBLOCSHIFT_Y;
  zs = Sector->Pos_z << ZVOXELBLOCSHIFT_Z;
  //Seed = xs + 3524*ys + 234 * zs;

  Ratio = (ULong)(4294967295.0 * Probability);

  GenerationRadius = 0;

  for (x = xs-GenerationRadius ; x< (xs + 16 + GenerationRadius) ;x++)
   for (z=zs-GenerationRadius; z < (zs+ 16 + GenerationRadius) ;z++)
   {
     if ((RandNum = Random.GetNumber( abs(x) + ( abs(z) << 8 ) )) < (Ratio)) // 6
     // if ( (((x & 31) == 0) && ((z & 31) == 0)) )
     // if ( Canva_4.GetPoint_Fast( x & 255, z & 255 ) != 0)
     {

       ZVector3L Position;
       ZVector3L Offset;

       Position.x = x-xs;
       Position.z = z-zs;
       Position.y = (GetZoneHeight(x,z, ZoneType) - ys);

       if (Position.y < 64 && Position.y > 0)
       {
         Sector->SetCube(Position.x, Position.y, Position.z, VoxelType);
         if (SetActiveSector) Sector->Flag_IsActiveVoxels = true;
       }


     }
   }
}

void ZWorldGenesis::GenerateRTFM(ZVoxelSector * Sector)
{
  if (Sector->Pos_x == 0 && Sector->Pos_y == 0 && Sector->Pos_z == 2)
  {
    Sector->SetCube_WithExtension(1,0,8, 212, 0 );
  }
}


void  ZWorldGenesis::Debug_Out_Zonemap()
{
  /*
  Long x,y;

  for (y=0;y<32;y++)
  {
    for (x=0;x<32;x++)
    {
      if (HeightMap[x][y] >=0 && HeightMap[x][y] <=9) printf("%d",(ULong)(HeightMap[x][y]) );
      else printf("%c",HeightMap[x][y] + 55);
    }
    printf("\n");
  }
  */
}

bool ZWorldGenesis::LoadTemplateImages()
{
  ZString MiscDirectory, FileName;
  MiscDirectory.AddToPath(COMPILEOPTION_DATAFILESPATH).AddToPath("Misc");

  FileName = MiscDirectory.Path("tmplt_1.dat");
  if (!Template_1.LoadBMP(FileName.String)) return false;
  Canva_1.SetSize(256,256);
  Canva_1.GetFromBitmap(&Template_1);

  FileName = MiscDirectory.Path("tmplt_2.dat");
  if (!Template_2.LoadBMP(FileName.String)) return false;
  Canva_2.SetSize(256,256);
  Canva_2.GetFromBitmap(&Template_2);

  FileName = MiscDirectory.Path("tmplt_3_1.dat");
  if (!Template_3_1.LoadBMP(FileName.String)) return false;
  Canva_3_1.SetSize(1024,1024);
  Canva_3_1.GetFromBitmap(&Template_3_1);

  FileName = MiscDirectory.Path("tmplt_3_2.dat");
  if (!Template_3_2.LoadBMP(FileName.String)) return false;
  Canva_3_2.SetSize(1024,1024);
  Canva_3_2.GetFromBitmap(&Template_3_2,true,1); // r=2 b=0 g=1

  FileName = MiscDirectory.Path("tmplt_3_3.dat");
  if (!Template_3_3.LoadBMP(FileName.String)) return false;
  Canva_3_3.SetSize(1024,1024);
  Canva_3_3.GetFromBitmap(&Template_3_3,true,0);

  FileName = MiscDirectory.Path("sect_1.dat");
  T3dTemplate_1.SetNotStandardSize();
  T3dTemplate_1.SetVoxelTypeManager(&Ge->VoxelTypeManager);
  T3dTemplate_1.Load(0,FileName.String);

  FileName = MiscDirectory.Path("sect_2.dat");
  T3dTemplate_2.SetNotStandardSize();
  T3dTemplate_2.SetVoxelTypeManager(&Ge->VoxelTypeManager);
  T3dTemplate_2.Load(0,FileName.String);

  FileName = MiscDirectory.Path("Vegetation_1.dat");
  Template_Vegetation_1.SetNotStandardSize();
  Template_Vegetation_1.SetVoxelTypeManager(&Ge->VoxelTypeManager);
  Template_Vegetation_1.Load(0,FileName.String);
  Template_Vegetation_1.Subst(32767+2, 234);
  //Template_Vegetation_1.Subst(71, 32767+21);

  FileName = MiscDirectory.Path("Vegetation_2.dat");
  Template_Vegetation_2.SetNotStandardSize();
  Template_Vegetation_2.SetVoxelTypeManager(&Ge->VoxelTypeManager);
  Template_Vegetation_2.Load(0,FileName.String);
  Template_Vegetation_2.Subst(1, 234);
  Template_Vegetation_2.Subst(2, 71);

  FileName = MiscDirectory.Path("Vegetation_3.dat");
  Template_Vegetation_3.SetNotStandardSize();
  Template_Vegetation_3.SetVoxelTypeManager(&Ge->VoxelTypeManager);
  Template_Vegetation_3.Load(0,FileName.String);
  Template_Vegetation_3.Subst(1, 234);
  Template_Vegetation_3.Subst(2, 71);

  TreeTable[0] = &Template_Vegetation_1;
  TreeTable[1] = &Template_Vegetation_2;
  TreeTable[2] = &Template_Vegetation_3;


  // Tools for ringmap manipulation.
/*
  Long Ring=5;
  Long Shift = 3;
  ZoneMap_Shift(ZoneMap_New, 128, 128, "const char * ZWorldGenesis::ZoneMap_New[]=", Ring, Shift, "Out_1.txt");
  ZoneMap_Shift(RingNum, 128, 128, "const char * ZWorldGenesis::RingNum[]=", Ring, Shift, "Out_2.txt",'5',2);
  ZoneMap_Shift(HeightMap_New, 32, 32, "const char * ZWorldGenesis::HeightMap_New[] =", Ring, Shift, "Out_3.txt");
*/

  //ZoneMap_ChangeSize(ZoneMap_New,64,64,"const char * ZWorldGenesis::ZoneMap_New[]=",128,128,'B',"Out_1.txt");
  //ZoneMap_ChangeSize(RingNum    ,64,64,"const char * ZWorldGenesis::RingNum[]="    ,128,128,'B',"Out_2.txt");
  //ZoneMap_ChangeSize(HeightMap_New    ,32,32,"const char * ZWorldGenesis::HeightMap_New[] ="    ,128,128,'0',"Out_3.txt");






  return(true);
}

void ZWorldGenesis::ZoneMap_ChangeSize(const char ** Table, Long TableWidth, Long TableHeight, const char * TableDecl, Long NewTableWidth, Long NewTableHeight, UByte EmptyZonesValue, const char * OutputFile)
{
  ZGenericCanva<UByte> Cv1, Cv2;
  ZString As;
  ZStream_File Stream;

  Cv1.GetFromByteTable(Table,TableWidth,TableHeight);

  Cv2.SetSize(NewTableWidth, NewTableHeight);
  Cv2.Clear(EmptyZonesValue);
  Cv2.Blit(&Cv1,0,0,Cv1.Width, Cv1.Height, (Cv2.Width / 2) - (Cv1.Width / 2), (Cv2.Height / 2) - (Cv1.Height / 2));

  Cv2.DumpAscii(As, TableDecl);
  Stream.SetFileName(OutputFile);
  Stream.PutFileContent(As);
}


void ZWorldGenesis::ZoneMap_Shift(const char ** Table, Long TableWidth, Long TableHeight, const char * TableDecl, Long Ring, Long Shift, const char * OutputFile, UByte IncThreshold, UByte IncAdd)
{
   ZGenericCanva<UByte> Cv1, * pCv2;
   ZString As;
   ZStream_File Stream;


   // Load the table
   Cv1.GetFromByteTable(Table,TableWidth,TableHeight);
   Long MWidth = Cv1.Width >> 1;
   Long MHeight = Cv1.Height >> 1;

   // Partie Haute
   pCv2 = Cv1.GetRectCopy(0,0,Cv1.Width,MHeight-Ring);
   Cv1.DrawBox(0,0,Cv1.Width, MHeight - Ring - 1, 0);
   Cv1.Blit(pCv2,0,0,Cv1.Width,MHeight,0,-Shift);
   delete pCv2;

   // Partie basse
   pCv2 = Cv1.GetRectCopy(0,MHeight + Ring,Cv1.Width,MHeight-Ring);
   Cv1.DrawBox(0,MHeight + Ring,Cv1.Width, Cv1.Height - 1, 0);
   Cv1.Blit(pCv2,0,0,Cv1.Width,Cv1.Height,0,MHeight+ Ring + Shift);
   delete pCv2;

   // Partie gauche
   pCv2 = Cv1.GetRectCopy(0, 0,MWidth - Ring, Cv1.Height);
   Cv1.DrawBox(0,0,MWidth - Ring - 1, Cv1.Height - 1, 0);
   Cv1.Blit(pCv2,0,0,Cv1.Width,Cv1.Height,-Shift,0);
   delete pCv2;

   // Partie droite
   pCv2 = Cv1.GetRectCopy(MWidth + Ring, 0,MWidth - Ring, Cv1.Height);
   Cv1.DrawBox(MWidth + Ring,0,Cv1.Width - 1, Cv1.Height - 1, 0);
   Cv1.Blit(pCv2,0,0,Cv1.Width,Cv1.Height, MWidth + Ring + Shift,0);
   delete pCv2;

   // Number shifting

   if (IncThreshold != 255)
   {
     UByte i;
     for (i=60;i >= IncThreshold;i--)
     {
       printf("%d",i);
       Cv1.SearchAndReplace(i, Cv1.Convert_NumToAsc(Cv1.Convert_AscToNum(i)+IncAdd) );
     }
   }

   // Recording result

   Cv1.DumpAscii(As, TableDecl);
   Stream.SetFileName(OutputFile);
   Stream.PutFileContent(As);


}

/*

void ZWorldGenesis::Generate_Terrain_1536(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z;
  UShort VoxelType;
  double nx,ny,nz, dns,cns, reduce, P[8], C[8], Coef1,Coef2,Coef3;
  ULong Rx,Ry,Rz;
  VoxelSector->Flag_NeedSortedRendering = true;

  UShort Textures[16];
  Textures[0] = 32767 + 3;
  Textures[1] = 32767 + 2;
  Textures[2] = 32767 + 1;

  Long sx = ((Sector_x+8192) << ZVOXELBLOCSHIFT_X);
  Long sy = ((Sector_y+8192) << ZVOXELBLOCSHIFT_Y);
  Long sz = ((Sector_z+8192) << ZVOXELBLOCSHIFT_Z);

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
      for (y=0 ; y<ZVOXELBLOCSIZE_Y ; y++)
      {
        nx = sx + x;
        ny = sy + y;
        nz = sz + z;

        Rx = (sx + x) >> 4; Ry = (sy + y) >> 4; Rz = (sz + z) >> 4;
        P[0] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[1] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[2] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[3] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[4] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[5] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[6] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[7] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz+1) ) % 30 ;
        double Coef1 = ((sx + x) % 16) * (1.0 / 16.0);
        // Coef1 = 1.0 - Coef1;
        double Coef3 = ((sy + y) % 16) * (1.0 / 16.0);
        // Coef3 = 1.0 - Coef3;
        double Coef2 = ((sz + z) % 16) * (1.0 / 16.0);
        dns = Interpolation_3d(P,Coef1,Coef2,Coef3);

        C[0] = ( RandomGen.GetNumber(Rx+200   ) + RandomGen.GetNumber(Ry + 200) + RandomGen.GetNumber(Rz+200  ) ) % 30 ;
        C[1] = ( RandomGen.GetNumber(Rx+201 )   + RandomGen.GetNumber(Ry + 200) + RandomGen.GetNumber(Rz+200  ) ) % 30 ;
        C[2] = ( RandomGen.GetNumber(Rx+200   ) + RandomGen.GetNumber(Ry + 200) + RandomGen.GetNumber(Rz+201) ) % 30 ;
        C[3] = ( RandomGen.GetNumber(Rx+201 )   + RandomGen.GetNumber(Ry + 200) + RandomGen.GetNumber(Rz+201) ) % 30 ;
        C[4] = ( RandomGen.GetNumber(Rx+200   ) + RandomGen.GetNumber(Ry + 201) + RandomGen.GetNumber(Rz+200  ) ) % 30 ;
        C[5] = ( RandomGen.GetNumber(Rx+201 )   + RandomGen.GetNumber(Ry + 201) + RandomGen.GetNumber(Rz+200  ) ) % 30 ;
        C[6] = ( RandomGen.GetNumber(Rx+200   ) + RandomGen.GetNumber(Ry + 201) + RandomGen.GetNumber(Rz+201) ) % 30 ;
        C[7] = ( RandomGen.GetNumber(Rx+201 )   + RandomGen.GetNumber(Ry + 201) + RandomGen.GetNumber(Rz+201) ) % 30 ;

        cns = Interpolation_3d(C,Coef1,Coef2,Coef3);


        VoxelType = Textures[(ULong)floor((cns/20.0))];

        // VoxelType = 32768;
        reduce = ( ((double)(sy + y -524288.0)) / 10.0);
        if (reduce < 0.0) reduce = 0.0;
        dns -= reduce;
        if   (dns< 15.0) {dns = 0.0;VoxelType=0;} //15.0

        // if (Sector_y > 1) VoxelType = 0;
        VoxelSector->SetCube(x,y,z, VoxelType);

      }
}

*/

void ZWorldGenesis::Generate_Terrain_1537(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, nx,ny,nz;
  UShort VoxelType;
  VoxelSector->Flag_NeedSortedRendering = true;

/*
  Textures[0] = 1; // 1
  Textures[1] = 2; // 12
  Textures[2] = 3; // 14
*/
  Long sx = ((Sector_x+8192) << ZVOXELBLOCSHIFT_X);
  Long sy = ((Sector_y+8192) << ZVOXELBLOCSHIFT_Y);
  Long sz = ((Sector_z+8192) << ZVOXELBLOCSHIFT_Z);

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
      for (y=0 ; y<ZVOXELBLOCSIZE_Y ; y++)
      {
        nx = sx + x;
        ny = sy + y;
        nz = sz + z;

        double Den = //sin(nx/(50.0+nx/10000.0)) * sin(ny/(50.0+ny/10000.0)) * sin(nz/(50.0+nz/10000.0)) *
                     sin(nx/(30.0)) * sin(ny/(30.0)) * sin(nz/(30.0))
                     /*(1.0 + 0.6 * (sin(nx/(1.3)) * sin(ny/(2.8)) * sin(nz/(1.63)))) */
                     * (1.0 + 0.4* ( ((double)RandomGen.GetNumber((nx >> 2) + (ny>>2) + (nz>>2))) / 4294967296.0)  );
        if (Den > 0.3) { VoxelType = 233; if (Den > 0.35) VoxelType = 232; }
        else           VoxelType = 0;
        VoxelSector->SetCube(x,y,z, VoxelType);
      }
}

void ZWorldGenesis::Generate_Terrain_1538(ZVoxelSector * VoxelSector, Long HeightOffset, Long Sector_x, Long Sector_y, Long Sector_z)
{
  Long x,y,z, nx,ny,nz;
  UShort VoxelType;
  double dns,cns, reduce, P[8], C[8], Coef1,Coef2,Coef3;
  ULong Rx,Ry,Rz;
  VoxelSector->Flag_NeedSortedRendering = true;

  UShort Textures[16];
  Textures[0] = 232; // 1
  Textures[1] = 233; // 12
  Textures[2] = 233; // 14
/*
  Textures[0] = 1; // 1
  Textures[1] = 2; // 12
  Textures[2] = 3; // 14
*/
  Long sx = ((Sector_x+8192) << ZVOXELBLOCSHIFT_X);
  Long sy = ((Sector_y+8192) << ZVOXELBLOCSHIFT_Y);
  Long sz = ((Sector_z+8192) << ZVOXELBLOCSHIFT_Z);

  for (z=0 ; z<ZVOXELBLOCSIZE_Z ; z++)
    for (x=0 ; x<ZVOXELBLOCSIZE_X ; x++)
      for (y=0 ; y<ZVOXELBLOCSIZE_Y ; y++)
      {
        nx = sx + x;
        ny = sy + y;
        nz = sz + z;

        Rx = (sx + x) >> 4; Ry = (sy + y) >> 4; Rz = (sz + z) >> 4;
        P[0] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[1] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[2] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[3] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry)   + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[4] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[5] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz  ) ) % 30 ;
        P[6] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz+1) ) % 30 ;
        P[7] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry+1) + RandomGen.GetNumber(Rz+1) ) % 30 ;
        Coef1 = ((sx + x) % 16) * (1.0 / 16.0);
        Coef3 = ((sy + y) % 16) * (1.0 / 16.0);
        Coef2 = ((sz + z) % 16) * (1.0 / 16.0);
        dns = Interpolation_3d(P,Coef1,Coef2,Coef3);

        Ry = (sy + y + 1) >> 4;
        C[0] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[1] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[2] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz+  1) ) % 30 ;
        C[3] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry    ) + RandomGen.GetNumber(Rz+  1) ) % 30 ;
        C[4] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[5] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz    ) ) % 30 ;
        C[6] = ( RandomGen.GetNumber(Rx   ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz+  1) ) % 30 ;
        C[7] = ( RandomGen.GetNumber(Rx+1 ) + RandomGen.GetNumber(Ry + 1) + RandomGen.GetNumber(Rz+  1) ) % 30 ;

        Coef3 = ((sy + y + 1) % 16) * (1.0 / 16.0);
        cns = Interpolation_3d(C,Coef1,Coef2,Coef3);

        VoxelType = Textures[(ULong)floor((cns/20.0))];

        // Aspérités.

        dns *= (1.0 + 0.4 * (sin(nx/(1.3)) * sin(ny/(2.8)) * sin(nz/(1.63))));
        cns *= (1.0 + 0.4 * (sin(nx/(1.3)) * sin(ny/(2.8)) * sin(nz/(1.63))));
        // VoxelType = 32768;
        reduce = ( ((double)(sy + y + (-524288 +20) - HeightOffset)) / 10.0); // 5.0
        if (reduce < 0.0) reduce = 0.0;
        dns -= reduce;
        cns -= reduce;
        if   (dns< 15.0) {dns = 0.0;VoxelType=0;} //15.0
        else
        {
          if ( (dns - cns) > 0.3) VoxelType = Textures[0];
          else if (dns-cns < -0.2) VoxelType = Textures[2];
          else {VoxelType = Textures[1]; if ((RandomGen.GetNumber(nx) + RandomGen.GetNumber(ny) + RandomGen.GetNumber(nz)) < 10000000) VoxelType = 46;}
        }

        // if (Sector_y > 1) VoxelType = 0;
        VoxelSector->SetCube(x,y,z, VoxelType);
      }
}
